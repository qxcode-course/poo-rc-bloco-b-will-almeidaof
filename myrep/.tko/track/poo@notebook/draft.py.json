{
    "patches": [
        {
            "label": "2025-10-20_00-10-48",
            "content": "@@ -1,417 +1,4 @@\n-class Bateria:%0A    def __init__(self, capacidade: int):%0A        self.__capacidade = capacidade%0A        self.__carga = capacidade%0A%0A    def get_capacidade(self):%0A        return self.__capacidade%0A    def get_carga(self):%0A        return self.__carga%0A    def set_carga(self, carga: int):%0A        self.__carga = carga%0A%0A%0A    def mostrar(self):%0A        print(f%22%7Bself.get_carga()%7D/%7Bself.get_capacidade()%7D%22)%0A    %0A        %0A%0A\n clas\n@@ -73,54 +73,8 @@\n alse\n-%0A        self.__bateria: Bateria %7C None = None\n %0A%0A  \n@@ -134,1000 +134,45 @@\n     \n-def set_ligado(self, status: bool):%0A        self.__ligado = status%0A    def get_bateria(self):%0A        return self.__bateria%0A    def set_bateria(self, bateria: Bateria):%0A        self.__bateria = bateria%0A%0A    def remover(self):%0A        self.__bateria = None%0A%0A%0A%0A    def mostrar(self):%0A        if self.get_ligado() == False and self.get_bateria == None:%0A            print (f%22status: desligado, bateria: (nenhuma)%22)%0A            return%0A        if self.get_ligado() == False:%0A            print (f%22status: desligado, bateria: (%7Bbateria.get_carga()%7D/%7Bbateria.get_capacidade()%7D)%22)%0A        if self.get_ligado() == True:%0A            print (f%22status: ligado, bateria: (%7Bbateria.get_carga()%7D/%7Bbateria.get_capacidade()%7D)%22)%0A    def ligar(self):%0A        if self.get_ligado() == True:%0A            print(%22notebook j%C3%A1 est%C3%A1 ligado%22)%0A            return%0A        if self.get_bateria() == None:%0A            print(%22fail: notebook sem bateria%22)%0A            return%0A        self.set_ligado(True)%0A        \n+%0Anotebook = Notebook()%0A\n print(\n-%22o \n notebook\n  foi\n@@ -171,722 +171,16 @@\n book\n- foi ligado%22)%0A%0A    def desligar(self):%0A        if self.get_ligado() == False:%0A            print(%22o notebook j%C3%A1 est%C3%A1 desligado%22)%0A            return%0A        self.set_ligado(False)%0A        print(%22o notebook foi desligado%22)%0A%0A    def usar(self, tempo: int):%0A        if self.get_ligado() == False:%0A            print(%22voc%C3%AA precisa ligar o notebook primeiro%22)%0A            return%0A        if tempo %3E bateria.get_carga():%0A            print(f%22bateria descarregou, voc%C3%AA usou at%C3%A9 %7Bbateria.get_carga()%7D minutos%22)%0A            bateria.set_carga(0)%0A            return%0A        bateria.set_carga((bateria.get_carga()) - tempo)%0A        print(f%22voc%C3%AA usou o notebook por %7Btempo%7D minutos%22)%0A        %0A%0Anotebook = Notebook()%0A%0Anotebook.mostrar()%0A\n+.get_ligado)\n",
            "lines": "9"
        },
        {
            "label": "2025-10-20_02-11-33",
            "content": "@@ -2283,29 +2283,8 @@\n k()%0A\n-bateria = Bateria(50)\n %0Anot\n",
            "lines": "77"
        },
        {
            "label": "2025-10-20_02-11-55",
            "content": "@@ -996,24 +996,43 @@\n (nenhuma)%22)%0A\n+            return%0A\n         if s\n@@ -2324,32 +2324,4 @@\n r()%0A\n-print(notebook.get_bateria)%0A\n",
            "lines": "77"
        },
        {
            "label": "2025-10-20_02-15-25",
            "content": "class Bateria:\n    def __init__(self, capacidade: int):\n        self.__capacidade = capacidade\n        self.__carga = capacidade\n\n    def get_capacidade(self):\n        return self.__capacidade\n    def get_carga(self):\n        return self.__carga\n    def set_carga(self, carga: int):\n        self.__carga = carga\n\n\n    def mostrar(self):\n        print(f\"{self.get_carga()}/{self.get_capacidade()}\")\n    \n        \n\nclass Notebook:\n    def __init__(self):\n        self.__ligado : bool = False\n        self.__bateria: Bateria | None = None\n\n    def get_ligado(self):\n        return self.__ligado\n    def set_ligado(self, status: bool):\n        self.__ligado = status\n    def get_bateria(self):\n        return self.__bateria\n    def set_bateria(self, bateria: Bateria):\n        self.__bateria = bateria\n\n    def remover(self):\n        self.__bateria = None\n\n\n\n    def mostrar(self):\n        if self.get_ligado() == False and self.get_bateria == None:\n            print (f\"status: desligado, bateria: (nenhuma)\")\n        if self.get_ligado() == False:\n            print (f\"status: desligado, bateria: ({bateria.get_carga()}/{bateria.get_capacidade()})\")\n        if self.get_ligado() == True:\n            print (f\"status: ligado, bateria: ({bateria.get_carga()}/{bateria.get_capacidade()})\")\n    def ligar(self):\n        if self.get_ligado() == True:\n            print(\"notebook j\u00e1 est\u00e1 ligado\")\n            return\n        if self.get_bateria() == None:\n            print(\"fail: notebook sem bateria\")\n            return\n        self.set_ligado(True)\n        print(\"o notebook foi ligado\")\n\n    def desligar(self):\n        if self.get_ligado() == False:\n            print(\"o notebook j\u00e1 est\u00e1 desligado\")\n            return\n        self.set_ligado(False)\n        print(\"o notebook foi desligado\")\n\n    def usar(self, tempo: int):\n        if self.get_ligado() == False:\n            print(\"voc\u00ea precisa ligar o notebook primeiro\")\n            return\n        if tempo > bateria.get_carga():\n            print(f\"bateria descarregou, voc\u00ea usou at\u00e9 {bateria.get_carga()} minutos\")\n            bateria.set_carga(0)\n            return\n        bateria.set_carga((bateria.get_carga()) - tempo)\n        print(f\"voc\u00ea usou o notebook por {tempo} minutos\")\n        \n\nnotebook = Notebook()\nbateria = Bateria(50)\nnotebook.mostrar()\nprint(notebook.get_bateria)\n",
            "lines": "77"
        }
    ]
}