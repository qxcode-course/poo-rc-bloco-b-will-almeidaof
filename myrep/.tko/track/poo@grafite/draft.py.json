{
    "patches": [
        {
            "label": "2025-10-21_22-48-33",
            "content": "@@ -30,814 +30,107 @@\n self\n-, thickness: float, hardness: str, size: int):%0A        self.__thickness: float = thickness%0A        self.__hardness: str = hardness%0A        self.__size: int = size%0A%0A    def usagePerSheet(self):%0A        if self.__hardness == %22HB%22:%0A            return 1%0A        elif self.__hardness == %222B%22:%0A            return 2%0A        elif self.__hardness == %224B%22:%0A            return 4%0A        elif self.__hardness == %226B%22:%0A            return 6%0A        else:%0A            return 0 %0A%0A%0A    def get_thickness(self):%0A        return self.__thickness%0A%0A    def get_hardness(self):%0A        return self.__hardness%0A    def set_size(self, tamanho: int):%0A        self.__size += tamanho%0A    def get_size(self):%0A        return self.__size%0A%0A%0A    def __str__(self) -%3E str:%0A        return f%22%7Bself.__thickness%7D:%7Bself.__hardness%7D:%7Bself.__size%7D%22\n+):%0A        self.__thickness: int = 0%0A        self.__hardness: str = %22%22%0A        self.__size: int = 0\n %0A%0A  \n@@ -196,20 +196,18 @@\n ckness: \n-floa\n+in\n t = 0%0A  \n@@ -287,76 +287,11 @@\n ra: \n-float):%0A        self.__thickness = espessura%0A%0A%0A%0A    def get_tip(self\n+int\n ):%0A \n@@ -301,23 +301,16 @@\n     \n-return \n self.__t\n ip%0A%0A\n@@ -309,1671 +309,234 @@\n .__t\n-ip%0A%0A    def inserir(self, grafite: Lead):%0A        if self.__tip != None:%0A            print(%22fail: ja existe grafite%22)%0A            return%0A%0A        if grafite.get_thickness() != self.__thickness:%0A            print(%22fail: calibre incompativel%22)%0A            return%0A        self.__tip = grafite%0A%0A    def remover(self) -%3E Lead %7C None:%0A        aux = self.__tip%0A        self.__tip = None%0A        return aux%0A%0A%0A    def writePage(self):%0A        if self.__tip is None:%0A            print(%22fail: nao existe grafite%22)%0A            return%0A%0A        size = self.__tip.get_size()%0A        cost = self.__tip.usagePerSheet()%0A%0A        if size %3C 10:%0A            print(%22fail: tamanho insuficiente%22)%0A            return%0A%0A        if size %3E= cost:%0A            self.__tip.set_size(size - cost)%0A            print(%22page escrita%22)%0A        else:%0A            self.__tip.set_size(0)%0A            print(%22fail: folha incompleta%22)%0A%0A%0A%0A    def __str__(self) -%3E str:%0A        grafite = self.__tip if self.__tip != None else %22null%22%0A        return f%22calibre: %7Bself.__thickness%7D grafite: %7Bgrafite%7D%22%0A    %0A%0A%0Adef main():%0A    pencil = Pencil()%0A    while True:%0A        line = input()%0A        print(%22$%22+line)%0A        args = line.split(%22 %22)%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22show%22:%0A            print(pencil)%0A        elif args%5B0%5D == %22insert%22:%0A            thickness = args%5B1%5D%0A            hardness = args %5B2%5D%0A            size = args%5B3%5D%0A            lead = Lead(float(thickness), hardness, int(size))%0A            pencil.inserir(lead)%0A        elif args%5B0%5D == %22init%22:%0A            pencil.set_thickness(float(args%5B1%5D))%0A        elif args%5B0%5D == %22remove%22:%0A            pencil.remover()%0A    %0Amain(\n+hickness = espessura%0A%0A    def __str__(self) -%3E str:%0A        grafite = self.__tip if self.__tip != None else %22null%22%0A        return f%22calibre: %7Bself.__thickness%7D grafite: %7Bgrafite%7D%22%0A    %0Apencil = Pencil()%0Alead = Lead()%0Aprint(pencil\n )\n",
            "lines": "22"
        },
        {
            "label": "2025-10-22_00-15-09",
            "content": "@@ -2116,17 +2116,16 @@\n ickness%7D\n-,\n  grafite\n",
            "lines": "112"
        },
        {
            "label": "2025-10-22_00-15-30",
            "content": "@@ -2127,17 +2127,16 @@\n rafite: \n-%5B\n %7Bgrafite\n@@ -2136,17 +2136,16 @@\n grafite%7D\n-%5D\n %22%0A    %0A%0A\n",
            "lines": "112"
        },
        {
            "label": "2025-10-22_00-15-56",
            "content": "@@ -781,17 +781,16 @@\n eturn f%22\n-%5B\n %7Bself.__\n@@ -831,17 +831,16 @@\n .__size%7D\n-%5D\n %22%0A%0A    %0A\n@@ -2127,16 +2127,17 @@\n rafite: \n+%5B\n %7Bgrafite\n@@ -2137,16 +2137,17 @@\n grafite%7D\n+%5D\n %22%0A    %0A%0A\n",
            "lines": "112"
        },
        {
            "label": "2025-10-22_00-16-57",
            "content": "@@ -2753,67 +2753,8 @@\n     \n-    elif args%5B0%5D == %22write%22:%0A            pencil.writePage()\n %0Amai\n",
            "lines": "112"
        },
        {
            "label": "2025-10-22_00-18-08",
            "content": "@@ -1709,20 +1709,18 @@\n  size %3C \n-cost\n+10\n :%0A      \n@@ -1773,32 +1773,61 @@\n         return%0A%0A\n+        if size %3E= cost:%0A    \n         self.__t\n@@ -1855,24 +1855,28 @@\n st)%0A        \n+   \n+ \n print(%22page \n@@ -1885,16 +1885,108 @@\n crita%22)%0A\n+        else:%0A            self.__tip.set_size(0)%0A            print(%22fail: folha incompleta%22)\n %0A%0A%0A%0A    \n",
            "lines": "113"
        },
        {
            "label": "2025-10-22_00-21-14",
            "content": "@@ -1824,16 +1824,46 @@\n - cost)%0A\n+        print(%22page escrita%22)%0A\n %0A%0A%0A%0A    \n",
            "lines": "110"
        },
        {
            "label": "2025-10-22_00-23-25",
            "content": "@@ -1708,17 +1708,16 @@\n f size %3C\n-=\n  cost:%0A \n",
            "lines": "109"
        },
        {
            "label": "2025-10-22_00-25-34",
            "content": "@@ -1714,10 +1714,12 @@\n  %3C= \n-10\n+cost\n :%0A  \n",
            "lines": "109"
        },
        {
            "label": "2025-10-22_00-25-48",
            "content": "@@ -1708,21 +1708,20 @@\n f size %3C\n- cost\n+= 10\n :%0A      \n",
            "lines": "109"
        },
        {
            "label": "2025-10-22_00-30-27",
            "content": "@@ -1712,12 +1712,13 @@\n ze %3C\n-= 10\n+ cost\n :%0A  \n",
            "lines": "109"
        },
        {
            "label": "2025-10-22_00-32-05",
            "content": "class Lead:\n    def __init__(self, thickness: float, hardness: str, size: int):\n        self.__thickness: float = thickness\n        self.__hardness: str = hardness\n        self.__size: int = size\n\n    def usagePerSheet(self):\n        if self.__hardness == \"HB\":\n            return 1\n        elif self.__hardness == \"2B\":\n            return 2\n        elif self.__hardness == \"4B\":\n            return 4\n        elif self.__hardness == \"6B\":\n            return 6\n        else:\n            return 0 \n\n\n    def get_thickness(self):\n        return self.__thickness\n\n    def get_hardness(self):\n        return self.__hardness\n    def set_size(self, tamanho: int):\n        self.__size += tamanho\n    def get_size(self):\n        return self.__size\n\n\n    def __str__(self) -> str:\n        return f\"[{self.__thickness}:{self.__hardness}:{self.__size}]\"\n\n    \nclass Pencil:\n    def __init__(self):\n        self.__thickness: float = 0\n        self.__tip: Lead | None = None\n\n    def set_thickness(self, espessura: float):\n        self.__thickness = espessura\n\n\n\n    def get_tip(self):\n        return self.__tip\n\n    def inserir(self, grafite: Lead):\n        if self.__tip != None:\n            print(\"fail: ja existe grafite\")\n            return\n\n        if grafite.get_thickness() != self.__thickness:\n            print(\"fail: calibre incompativel\")\n            return\n        self.__tip = grafite\n\n    def remover(self) -> Lead | None:\n        aux = self.__tip\n        self.__tip = None\n        return aux\n\n\n    def writePage(self):\n        if self.__tip is None:\n            print(\"fail: nao existe grafite\")\n            return\n\n        size = self.__tip.get_size()\n        cost = self.__tip.usagePerSheet()\n\n        if size <= 10:\n            print(\"fail: tamanho insuficiente\")\n            return\n\n        self.__tip.set_size(size - cost)\n\n\n\n\n    def __str__(self) -> str:\n        grafite = self.__tip if self.__tip != None else \"null\"\n        return f\"calibre: {self.__thickness}, grafite: {grafite}\"\n    \n\n\ndef main():\n    pencil = Pencil()\n    while True:\n        line = input()\n        print(\"$\"+line)\n        args = line.split(\" \")\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"show\":\n            print(pencil)\n        elif args[0] == \"insert\":\n            thickness = args[1]\n            hardness = args [2]\n            size = args[3]\n            lead = Lead(float(thickness), hardness, int(size))\n            pencil.inserir(lead)\n        elif args[0] == \"init\":\n            pencil.set_thickness(float(args[1]))\n        elif args[0] == \"remove\":\n            pencil.remover()\n        elif args[0] == \"write\":\n            pencil.writePage()\nmain()",
            "lines": "109"
        }
    ]
}